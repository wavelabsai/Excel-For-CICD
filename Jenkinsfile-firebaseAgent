pipeline {
    agent any
    parameters {
        string(name: 'ARTIFACTID', defaultValue: 'https://artifactory.magmacore.org/artifactory/debian-test/pool/focal-ci/magma_1.7.0-1637259345-3c88ec27_amd64.deb', description: 'Download URL to the Deb package')
        string(name: 'TestCaseName', defaultValue: '23401-4g-magma', description: 'Mention the test Case that you want to execute.')
        string(name: 'agwIp', defaultValue: '192.16.1.120', description: 'eth0 IP of your AGW instance.')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '3'));
        timestamps()
    }
    environment {
        prefix= "${JOB_BASE_NAME}-${BUILD_NUMBER}"
        admin_operator_key_pem = credentials('admin_operator_key_pem')
        admin_operator_pem = credentials('admin_operator_pem')
        abot_ip = "172.16.6.184"
        testAgentIp = "192.16.0.7"
    }
    stages {
        stage ('Deploy and upgrade AGW') {
            steps {
                script {
                    try {
                        def ansibleInventory = """{all: {hosts: 172}}"""
                        ansInvData = readYaml text: ansibleInventory
                        ansInvData.all.hosts = params.agwIp
                        writeYaml charset: '', data: ansInvData, file: 'ansible/agw_ansible_hosts'
                        def packageVersion = parseUrl(params.ARTIFACTID)
                        sh "chmod 0600 terraform/ssh-keys/id_ed25519"
                        dir('ansible') {
                            sh "ansible-playbook agw_deploy.yaml --extra-vars \'magma5gVersion=${packageVersion}\' --tags upgrade5gVersion"
                        }
                    } catch (err) {
                        deleteDir()
                    } finally {
                        deleteDir()
                    }
                }
            }
        }
        stage ('Execute Feature File') {
            steps {
                script {
                    try {
                        def execStatus = true
                        def runFeatureFileurl = "http://${abot_ip}:5000" + '/abot/api/v5/feature_files/execute'
                        def runFeatureFileparams = "{\"params\": \"${params.TestCaseName}\"}"
                        runFeatureFile = sendRestReq(runFeatureFileurl, 'POST', runFeatureFileparams, 'application/json')
                        runFeatureFile = readJSON text: runFeatureFile.content
                        runFeatureFile = runFeatureFile.status.toString()
                        if ( runFeatureFile == "OK" ) {
                            while (execStatus) {
                                def execStatusurl = "http://${abot_ip}:5000" + '/abot/api/v5/execution_status'
                                def execStatusparams = ""
                                execStatus = sendRestReq(execStatusurl, 'GET', execStatusparams, 'application/json')
                                execStatus = readJSON text: execStatus.content
                                execStatus = execStatus.status
                                println "Executing Feature Files: "
                                sleep time: 30, unit: 'SECONDS'
                            }
                        } else {
                            error "Error running Feature files."
                        }
                    } catch (err) {
                        deleteDir()
                    } finally {
                        deleteDir ()
                    }
                }
            }
        }
        stage ('Get test result info and download') {
            steps {
                script {
                    try {
                        def lastArtTimeStampurl = "http://${abot_ip}:5000" + '/abot/api/v5/latest_artifact_name'
                        def lastArtTimeStampparams = ""
                        lastArtTimeStamp = sendRestReq(lastArtTimeStampurl, 'GET', lastArtTimeStampparams, 'application/json')
                        lastArtTimeStamp = readJSON text: lastArtTimeStamp.content
                        echo lastArtTimeStamp.data.latest_artifact_timestamp.toString()
                        lastArtTimeStamp = lastArtTimeStamp.data.latest_artifact_timestamp.toString()
                        def lastArtUrlurl = "http://${abot_ip}:5000" + "/abot/api/v5/artifacts/download?artifact_name=${lastArtTimeStamp}"
                        def lastArtUrlparams = ""
                        lastArtUrl = sendRestReq(lastArtUrlurl, 'GET', lastArtUrlparams, 'application/json')
                        lastArtUrl = readJSON text: lastArtUrl.content
                        fileUrl = lastArtUrl.result.toString()
                        sh(returnStdout: true, script: """curl ${fileUrl} -o testArtifact.zip""")
                        sh(returnStdout: true, script: """if [ ! -d testArtifact ]; then mkdir testArtifact; fi""")
                        unzip dir: 'testArtifact', glob: '', zipFile: 'testArtifact.zip'
                        def getResulturl = "http://${abot_ip}:5000" + "/abot/api/v5/artifacts/execFeatureSummary?foldername=${lastArtTimeStamp}"
                        def getResultparams = ""
                        getResult = sendRestReq(getResulturl, 'GET', getResultparams, 'application/json')
                        getResult = readJSON text: getResult.content
                        def tableBody = readFile("config_files/test_report.html")
                        def htmlReport = createHtmlTableBody (getResult, tableBody)
                        writeFile file: 'testArtifact/logs/sut-logs/magma-epc/MME1/index.html', text: htmlReport.toString()                        
                    } catch (err) {
                        println err
                        deleteDir()
                    } finally {
                        deleteDir()
                    }
                }
            }
        }
        stage ('Sync ABot test reports to Test Agent') {
            steps {
                script {
                    try {
                        def ansibleInventory = """{all: {hosts: 172}}"""
                        ansInvData = readYaml text: ansibleInventory
                        ansInvData.all.hosts = params.testAgentIp
                        writeYaml charset: '', data: ansInvData, file: 'ansible/agw_ansible_hosts'
                        dir ('ansible') {
                            sh "ansible-playbook transfer_test_result.yaml"
                        }
                    } catch (err) {
                        deleteDir()
                    } finally {
                        deleteDir()
                    }
                }
            }
        }
    }
}

def parseUrl (url) {
    String[] urlArray = url.split("/");
    String lastPath = urlArray[urlArray.length-1];
    lastPath = lastPath.take(lastPath.lastIndexOf('_'))
    packageVersion = lastPath.substring(lastPath.indexOf("_") + 1)
    return packageVersion
}

@NonCPS
def createHtmlTableBody (jsonData, html) {
    def engine = new groovy.text.SimpleTemplateEngine()
    def htmlText = engine.createTemplate(html).make([jsonData: jsonData])
    println htmlText.toString()
    return htmlText
}

def sendRestReq(def url, def method = 'GET', def data = null, type = null, headerKey = null, headerVal = null) {
    try{
        def response = null
        if (null == url || url.toString().trim().isEmpty()) return response
        method = method.toUpperCase()
        switch (method) {
            case 'GET':
                response = httpRequest quiet: true, httpMode: method, ignoreSslErrors: true,  url: url, wrapAsMultipart: false
                break
            case 'POST':
            case 'PUT':
            case 'DELETE':
                if (null == data) {
                    response = httpRequest quiet: true, httpMode: method, ignoreSslErrors: true, url: url, wrapAsMultipart: false
                } else if (headerKey != null && headerVal != null){
                    // if (null == type || type.toString().trim().isEmpty()) return response
                    response = httpRequest quiet: true, httpMode: method, ignoreSslErrors: true, url: url, requestBody: "${data}", wrapAsMultipart: false, customHeaders: [[maskValue: false, name: 'Content-Type', value: type], [maskValue: false, name: "${headerKey}", value: "${headerVal}"]]
                }
                else {
                    if (null == type || type.toString().trim().isEmpty()) return response
                    response = httpRequest quiet: true, httpMode: method, ignoreSslErrors: true, url: url, requestBody: "${data}", wrapAsMultipart: false, customHeaders: [[maskValue: false, name: 'Content-Type', value: type]]
                }
                break
            default:
                break
                return response
        }
        return response
    } catch(Exception ex) {
        return null
    }
}